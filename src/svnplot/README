============
Introduction
============
SVNPlot generates graphs similar to StatSVN. The difference is in how the graphs are generated. SVNPlot generates these graphs in two steps. First it converts the Subversion logs into a 'sqlite3' database. Then it uses sql queries to extract the data from the database and then uses excellent Matplotlib plotting library to plot the graphs.

I believe using SQL queries to query the necessary data results in great flexibility in data extraction. Also since the sqlite3 is quite fast, it is possible to generate these graphs on demand.
Installation

You will need following additional libraries for using SVNPlot

   1. sqlite3 - is default installed with python
   2. http://pysvn.tigris.org/- Python SVN bindings.
   3. http://numpy.scipy.org/- Matplotlib uses NumPy? and SVNPlot uses Matplotlib for plotting.
   4. http://matplotlib.sourforge.net/ - You need at least version 0.98.5.2 

============
Quick Start
============
1. First generate the sqlite database for your project.

    svnlog2sqlite.py <svnrepo url> <sqlitedbpath> 

    <svnrepo url> can be any repository format supported by Subverson. If you are using the local repositories on windows use the file:///d:/... format. <sqlitedbpath> is sqlite database file path. Its a path on your local machine 

    You can run this step multiple times. The new revisions added in the repository will get added to datatbase 
    
	Options : 
    * -l : Update the changed line count data also. By default line count data is NOT updated.     
    NOTE : for version 0.5.5 -l option works only if svnrepo_url is 'repository root'. It doesn't work if the URL is inside the repository. This a bug. It will be fixed in the next version. 

    * -v : Verbose output
    * -g : enable logging of intermediate data and errors. Enable this option if you face any problems like line count not getting generated, no data in the generated sqlite database etc. 
	
2. Now generate the graphs.

    svnplot.py [options] <svnsqlitedbpath> <output directory> 

    <graphdir> is local directory on your machine. All the graphs will placed in this directory. 

    Following addition options are useful 

    * -n '<reponame>' : This is name of repository (e.g. project name). It will use in generating the graph titles
    * -s '<searchpath>' :search path in the repository (e.g. /trunk) 
	* -p 'template file path' :  Default svnplot uses its own standard report format. However, you can change report format using -p option. 
	* -v : verbose output
	
3. Generating Graph with your own report template
   You can use your own report template for the generated graphs. One example of report template is available in 'svnplot-long.tmpl'. This template directly embed the generated graphs images in the report and doesnot use thumbnails. It is useful to get a printed report.
   
   For example, 
   svnplot.py -v --dpi 70 -p svnplot-long.tmpl -n "MyRepo" <sqlitedb path> <output directory>
   
   TIP - Use 70 pixesl per inch resolution for better results with svnplot-long.tmpl template.
 
============
Options for collecting SVN logs from different dates
By: Oscar Castaneda
============

SVNPlot collects SVN logs through svnlog2sqlite.py. This script in turn uses another Python script, svnlogiter.py. Changes can be made to svnlogiter.py to allow collection of SVN logs from different time periods specified through the 'date' of a Revision. This includes specifiying a different date and time for the start and end Revisions of an SVN log being collected. These changes allow specification of time frames for SVN log collection, which can be useful, for instance, when analyzing the evolution of an open source codebase.

For the start Revision, or headrev in svnlogiter.py, the following changes were made to svnlogiter.py:

	headrev = pysvn.Revision( pysvn.opt_revision_kind.head)

to:

	headrev = pysvn.Revision( pysvn.opt_revision_kind.date, calendar.timegm((self.svnrepoyear, self.svnrepomonth, self.svnrepoday, 22, 
12, 12, 2, 251, 0)) )

This allows specifying the svnrepoyear, svnrepomonth and svnrepoday, followed by a fix time, to a desired value (e.g. 2008-01-01 @ 22.12). The result will be that the Head Revision collected will be that of the date specified. Another way to refer to this is the 'end' Revision, or latter time period of collection. 

For the start Revision, or the earlier period of collection, the following changes were made to svnlogiter.py:

	starttime = calendar.timegm((self.svnrepoyear, self.svnrepomonth, 1, 00, 00, 00, 0,0,0))
 
This will define a starttime for SVN log collection to a date determined by svnrepoyear and svnrepomonth, always on the first day of the month. Further changes can be made along these lines as deemed necessary.

Status in SVNPlot: Currently the changes mentioned above are only implemented by manually changing the code in svnlogiter.py. The plan is to include parameters for these options to make SVNPlot, and more specifically svnlog2sqlite.py, a more flexible tool for collection of SVN logs.

============
License
============
SVNPlot is released under New BSD License http://www.opensource.org/licenses/bsd-license.php
